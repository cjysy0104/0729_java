package com.kh.chap05.model.vo;
/*
 * Interface
 * 
 * [ 표현법 ]
 * 
 * 접근제한자 interface 인터페이스 식별자{
 * 		// 필드
 * 		// 인터페이스
 * }
 * 
 * 구체 클래스
 * 추상 클래스
 * 인터페이스
 * 
 * - 추상클래스보다 더욱 강한 규칙성, 강제성을 가짐
 * 
 * - 인터페이스의 필드는 상수 필드
 * 
 * - 인터페이스의 메서드 키워드를 붙이지 않는 이상 추상메서드
 * 
 * - 인터페이스는 다중 구현을 허용한다.
 * 
 * - "무조건 구현해야하는 기능이 있을 경우 인터페이스를 사용해서
 * 	  사용법만 만들어주고 구현하는 쪽에서 실체화하게 만듬" ==> 오버라이딩
 * 
 * 1. 추상클래스와 인터페이스의 공통점
 * 
 * - 객체 생성은 불가능 하지만, 부모자료형의 참조타입으로는 사용이 가능함(다형성을 적용할 수 있음)
 * - 추상메서드를 가지고 있을 경우, 상속(구현)받는 클래스에서 추상메서드를 오버라이딩 하도록 강제함
 * 
 * 2. 차이점
 * 
 * - 추상클래스: 멤버로 일반필드, 일반메서드를 가질 수 있음
 * 			  추상메서드는 생략 가능(추상메서드가 없다고 추상클래스가 아니게 되진 않는다.)
 * 
 * - 인터페이스: 상수필드, 특정한 경우를 제외하면 모든 메서드를 추상메서드로 정의 해야함
 * 
 * 둘 다 다형성을 적용하여 외부에서 보여지는 타입의 용도로 사용하지만
 * 
 * -> 추상클래스는 자식클래스가 상속을 받아서 필드 / 메서드를 재사용하고 클래스를 확장하는 용도
 * 
 * -> 인터페이스는 기능의 구현을 강제하기 위한 용도
 */
public interface MusicI {
	// 인터페이스로는 객체 생성이 불가능하기 때문에 생서앚장을 기술할 수 없음
	// public MusicI num
	
	/*public static final*/int NUM = 1;
	// 인터페이스의 모든 필드들은 암죽적으로 public static final
	
	/*
	public void hi(){
	
	}
	*/
	/*public abstract*/ void play();
	// 인터페이스의 메서드들은 기본적으로 추상메서드
	
	default void stop() {
		System.out.println("음악을 멈춥니다.");
	}
	// 인터페이스를 구현한 모든 클래스가 동일하게 수행해야하는 메서드에는 default 키워드를 붙임
	// !! 접근제한자 default 와는 다름 !!
}
